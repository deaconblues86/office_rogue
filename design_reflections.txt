Design overview:

 - In Flux

Proposed Action System:
    - Coworkers have list of all available actions
    - Actions can have requirements (make_coffee requires coffee & coffee maker)
        job:  The job required to perform the action
        target:  The specific named object upon which the action is perfomed if applicable
        target_state:  The required state of the object upon which the action is performed (dirty, broken) if applicable
        target_tag:  The required tag of the object upon which the action is performed (animal, human, appliance) if applicable
        target_task: (boolean) If True, target object will make itself known
            - For target_tasks, will need to check "board" of available requests in game instance
        reagents:  "Ingredients" or "Tools" needed to complete the action
        range: The distance, default 1 (adjacent), from the target at which the action can be performed
    - Actions will have satisfies tag.  Indicates the need the action would fufill
        - Based on action requirments, tasks can then be created, ordered, and stored in Memories (drink_coffee satisifies energy => requires coffee => make_coffee produces coffee => make_coffee requires coffee beans & coffee maker => supply closet vends coffee beans)
    - Including old "target_func" in some actions' (restocking) effects attribute
        - May not be ideal, but whats the alternative??
            - could just be unique to vendors, if so fuck it..
            - could also "give" the stock which would be a bit more generic
    - Dump old Request system
        - in it's place, objects have triggers:
            triggers include configurable state change & action that can now be performed (drop: clean_up, dirty: clean)

    Side Note:
        - Interactive Menu of available actions can be populated based on chosen object/chosen object state under cursor, held reagents, etc.

Notes on nested actions/supply chains:
    Huge production chains of course lead to evaluations within evaluations, but is this that really a concern or what we want?
     - The initial impetus of this rougelike was to set up a functional office of sorts, now, with larger goals, we're thinking villages within a world
     - In either case, I would expected a certain amount of separation of duties... Not one guy mining stone, smelting ore it, forging it, etc
       - goods that can't be sourced locally should be requested from traders who look beyond borders
       - also need to ability to train people for missing jobs/create missing appliances
     - The player can certainly do all that, and that's fine, they have a brain.
     - If we assume a certain amount of specialization, which would be better ultimately I feel, then we need a way to manage requests of materials as well
        - "no food at the granary sire"
     - already have plans for a "manager" class whose sole job it is to post requests for items & generally direct workers

    Let's consider hunting...
    - needs bolts/arrows & needs crossbow/bow
    - OR needs traps & checks traps
        - Traps are easy enough => place traps satsifies work & checks traps satisfies work
            - intresting though, check should take priority & once done, then place
            - place traps would require traps...  reagent check would prioritize check
    - Assuming "hunters" start with req. gear, really only the ammo that matters
    - "Purchase" would be one action
    - "Make" is several (harvet_wood, harvest_stone/(harvest_iron_ore & smelt_iron), make_arrowheads)
    - Think it's safe to, regardless of action, it's always about missing reagents...
        - Maybe "flatten" all missing reagents (going back to "Make"):
            - actions = what gives wood + what gives stone/what gives iron => what gives iron_ore + make_arrowheads
            - at every step, some of these goods could be purchasable
